[gcode_macro G29]
description: Mesh Level the Bed
gcode:
 BED_MESH_CLEAR
 G28
 BED_MESH_CALIBRATE
 BED_MESH_PROFILE SAVE=x1
 
[gcode_macro G34]
description: Tram Z axis
gcode:
     G28
     Z_TILT_ADJUST				 			  

[gcode_macro G35]
description: Tram at screw locations
gcode:
     G28
     SCREWS_TILT_CALCULATE

[gcode_macro START_PRINT]
# Reference https://github.com/KevinOConnor/klipper/blob/master/docs/Config_Reference.md#gcode_macroA
# On how to override default parameters
#default_parameter_BED_TEMP: 60
#default_parameter_EXTRUDER_TEMP: 200
description: Start a print

gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(180)|float %}

    M117 Homing if needed                  # Home the printer
    _HOME_IF_NEEDED
    M117 Heating Bed/Nozzle                # Pre-Heating Bed and nozzle
    M190 S{BED_TEMP}                       # wait for bed to get to target tempurature.
    M109 S{EXTRUDER_TEMP}                  # wait for nozzle to heat to target
    M117 Antiblob retract...
    G92 E0 # Reset Extruder distance to 0
    G1 E-1 # Retracts filament to prevent blobs during probing
    G92 E0 # Reset Extruder distance to 0    

    #M117 Checking Z Tilt - disabled as don't need it everytime.
    #Z_TILT_ADJUST

    M117 Probing bed                       # Probe Everytime
    G29 
	#load saved mesh at print start instead of probe. Uncomment to use but comment out G29
	#BED_MESH_PROFILE LOAD=x1   			 

    M117 Heating Nozzle
    M109 S{EXTRUDER_TEMP}                   # bring nozzle back up to printing tempurature

    M117 Purging Extruder
    G90                                     # Use absolute coordinates
    G1 Z3.0 F3000                           # move z up little to prevent scratching of surface
    G1 X0.1 Y20 Z0.3 F5000.0                # move to start-line position
    G1 X0.1 Y200.0 Z0.3 F500.0 E15          # draw 1st line
    G1 X0.4 Y200.0 Z0.3 F5000.0             # move to side a little
    G1 X0.4 Y20 Z0.3 F500.0 E30             # draw 2nd line
    G92 E0                                  # reset extruder
    G1 Z3.0 F3000                           # move z up little to prevent scratching of surface
    G21                                     # set units to millimeters
    G90                                     # use absolute coordinates
    
[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    G91
    G1 X-2 Y-2 E-3 F300                      # Move nozzle away from print while retracting
    G1 Z30 F3000                             # Raise nozzle by 30mm
    G90
    G1 X0 Y295 F1000                         # prepare for part removal
    SET_LED LED=printer_neopixel RED=0 GREEN=1 BLUE=0  # set neopixels to green
    M84                                      # Disable steppers
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=60

[idle_timeout]
gcode:
  {% if printer.pause_resume.is_paused %}
    M117 Idle, turning off hotend
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  {% else %}
    TURN_OFF_HEATERS
    M84
  {% endif %}
timeout: 3600

[respond]


[pause_resume]
recover_velocity: 50

#[gcode_macro M600] #Original M600 Macro
#gcode:
#    {% set X = params.X|default(50)|float %}
#    {% set Y = params.Y|default(0)|float %}
#    {% set Z = params.Z|default(10)|float %}
#    SAVE_GCODE_STATE NAME=M600_state
#    PAUSE
#    G91
#    G1 E-.8 F2700
#    G1 Z{Z}
#    G90
#    G1 X{X} Y{Y} F3000
#    G91
#    G1 E-50 F1000
#    RESTORE_GCODE_STATE NAME=M600_state

# \/\/\/\/\/\/    Everyting between these lines is a test as of Feb. 03, 2022  \/\/\/\/\/\/\/\/
[gcode_macro M600]
#
# M600
#
# Mimic Marlin's Pause for filament change command
description: Pause for filament change
gcode:
    PAUSE
    M117 Paused
    M118 Print paused for filament change... type "Resume" to continue

[gcode_macro PAUSE]
#
# PAUSE
#
# Print pause - moves the toolhead up (if there's room) and to the front left corner
#
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 2.0
description: Pause the print and park the toolhead at the front
gcode:
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set x_park = 10.0|float %}
  {% set y_park = 10.0|float  %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 40.0) %}
      {% set z_safe = act_z + 40.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  M118 Parking at X:{x_park} Y:{y_park} Z:{z_safe}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x_park} Y{y_park} F6000


[gcode_macro RESUME]
#
# RESUME
#
# Resume a paused print
rename_existing: BASE_RESUME
description: Resume a paused print
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### end of definitions #####
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  BASE_RESUME

[delayed_gcode _CLEAR_DISPLAY]
# _CLEAR_DISPLAY helper macro
# Clear the last message from the printer display
# Usage: UPDATE_DELAYED_GCODE TARGET=_CLEAR_DISPLAY ID={time in seconds to wait before clearing display}
gcode:
  M117

[gcode_macro _HOME_IF_NEEDED]
# _HOME_IF_NEEDED
# Perform a homing action only if one of the axes isn't homed.
description: Conditional home (i.e., home only if not homed already)
gcode:
  {% if not (('xy' in printer.toolhead.homed_axes) or ('z' in printer.toolhead.homed_axes)) %}
    { action_respond_info("Homing!") }
    G28
  {% else %}
      { action_respond_info("No Homing Needed!") }
  {% endif %}

[gcode_macro _set_leds]
gcode:
    {% if printer.extruder.target == 0 %} 
        # the extrude heater is off 
    {% else %}                                            # the extrude heater is on
      {% if printer.idle_timeout.state == "Printing" %}   # we are printing progress is in the display_status object 
        {% set perc = printer.display_status.progress %} 
        {% set numleds = 15 %} # set this to how many leds you have for your bar 
        {% set last = (perc|float * numleds|float)|int %}
        {% for n in range(numleds) %} 
          {% if n < last %} 
            SET_LED LED=printer_neopixel RED=0 GREEN=0 BLUE=1 TRANSMIT=0 index={ n + 1|int }
          {% else %} 
            SET_LED LED=printer_neopixel RED=0.6 GREEN=0.6 BLUE=0.6 TRANSMIT=0 index={ n + 1|int }
          {% endif %}
        {% endfor %}
          SET_LED LED=printer_neopixel RED=1 GREEN=0 BLUE=0 TRANSMIT=1 INDEX={ last + 1|int }
        {% endif %}
    {% endif %}

[delayed_gcode _update_leds_loop]
initial_duration: 5 
gcode:
    _set_leds 
    UPDATE_DELAYED_GCODE ID=_update_leds_loop DURATION=60

[gcode_macro Turn_on_Lights]
gcode:
    SET_LED LED=printer_neopixel RED=1 GREEN=1 BLUE=1

[gcode_macro Turn_off_Lights]
gcode:
    SET_LED LED=printer_neopixel RED=0 GREEN=0 BLUE=0

[gcode_macro Clean_Bed]
description: Heat bed to 60c and move z up, x to 0 and bed all the way forward.
gcode:
    _HOME_IF_NEEDED                            # shit won't move unless it's been homed so ...
    M140 S60                                  # Set bed temp to 60c
    G90
    G1 Z120 F3000                             # Raise nozzle to 120mm
    G1 X0 Y295 F6000                          # prepare for bed cleaning
    SET_LED LED=printer_neopixel RED=0 GREEN=0 BLUE=1  # set neopixels to blue
    
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(500) %}
    G91
    G1 E50 F{speed}
    G1 E50 F{speed}
    G92

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(500) %}
    G91
    G1 E-50 F{speed}
    G1 E-50 F{speed}
    G92

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

################################################################################
##    HEAT SOAK MACROS
##  From : https://klipper.discourse.group/t/interruptible-heat-soak/1552/7
################################################################################

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(15) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50
    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

    ;; pause the print during heat soak
    BASE_PAUSE

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }

            ;; heat soak was cancelled -- also cancel the print
            CANCEL_PRINT
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }

            ;; heat soak is complete. Call the complete macro prior to starting the print
            #SOAK_COMPLETE
            ;; resume / start the print
            BASE_RESUME
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }

[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z25 F7200
